# Relational

[1][P] User
--- fields
  + id: String PK
  + userName: String unique regex([a-z][a-z0-9\_\-]+)
  + email: String
  + displayName: String
  + createdAt: Timestamp
  + confirmedAt: Timestamp
  + passwordHash: String
  + preferences: Object/String json encoded
--- user.create
  + id = uuid()
  + userName = request.user.userName
  + email = request.user.email
  + displayName = request.user.displayName
  + passwordHash = hash(request.user.password)
  + createdAt = Date.now()
--- user.updatePassword
  + passwordHash = hash(request.user.passwordNew)
--- user.update
  + email = request.user.email
  + displayName = request.user.displayName
  + preferences = Object.assign({}, user.preferences, request.user.preferences)

[2][1:N] UserSession
--- fields
  + id: String PK
  + userId: String FK(User)
  + token: String
  + tokenOld: String
  + shortCode: String
  + createdAt: Timestamp
  + refreshAt: Timestamp
  + expireAt: Timestamp

[3][1:N] ProjectInfo
--- fields
  + id: String PK
  + ownerId: String FK(User)
  + title: String
  + publicRead: Boolean
  + publicClone: Boolean
  + createdAt: Timestamp
  ^ public means everyone besides involved users can read project and data 
--- relations
  + owner: belongs to one User FK(ownerId)
  + project: has one Project FK(id)
--- project.create
  + id = uuid()
  + createdAt = Date.now()
  + ownerId = context.user.id
  + title = request.project.title ?? "Untitled Project"
  + publicRead = false
  + publicClone = false
--- project.update
  + title = request.project.title
  + publicRead = request.project.publicRead
  + publicClone = request.project.publicRead
--- project.clone
  + id = uuid()
  + createdAt = Date.now()
  + ownerId = context.user.id
  + title = context.project.title
  + publicRead = context.project.publicRead
  + publicClone = false
  + project = clone(context.project.project)

[4][1:1] Project
--- fields
  + id: String PK FK(ProjectInfo) delete cascade
  + data: ProjectData/String # json encoded 
  + history: ProjectHistory/String # json encoded
  + plugins: PluginVersion[]/String # json encoded

[5][M:N] ProjectInvolvement 
--- fields
  + projectId: String PK FK(ProjectInfo) delete cascade
  + receiverId: String PK FK(User)
  + senderId: String FK(User)
  + receiverStatus: InvolvementStatus
  + senderStatus: InvolvementStatus
  + permission: PermissionLevel
  + sentAt: Timestamp
  + acceptedAt: Timestamp
  + interactedAt: Timestamp
--- relations
  + project: belongs to one Project FK(projectId)
  + receiver: belongs to one User FK(receiverId)
  + sender: belongs to one User FK(senderId)
--- project.involvement.create
  + projectId = request.project.id
  + receiverId = request.receiver.id
  + senderId = context.user.id
  + receiverStatus = "none"
  + senderStatus = "invited"
  + permission = request.project.permission
--- project.involvement.update
  + permission = request.project.permission
--- project.involvement.accept
  + receiverStatus = "accepted"
  + acceptedAt = Date.now()
--- project.involvement.reject
  + receiverStatus = "rejected"
--- project.involvement.invite
  + senderStatus = "invited"
  + receiverStatus = "none"
--- project.involvement.kick
  + senderStatus = "rejected"
  + receiverStatus = "none"

[6][1:N] Plugin
--- fields
  + id: String PK 
  + authorId: String FK(User)
  + name: String
  + createdAt: Timestamp
  + description: String
  ^ Plugin.id can be built
    as Plugin.author.userName + Plugin.name
--- relations
  + author: belongs to one User FK(authorId)
--- plugin.create
  + id = context.user.userName + "/" + request.plugin.name
  + authorId = context.user.id
  + name = request.plugin.name
  + description = request.plugin.description
  + createdAt = Date.now()
--- plugin.update
  + description = request.plugin.description

[7][1:N] PluginVersion
--- fields
  + id: String PK
  + pluginId: String FK(Plugin)
  + version: String
  + createdAt: Timestamp
  + publishedAt: Timestamp
  + depends: PluginVersion[]/String # json encoded
  ^ PluginVersion.id can be built
    as PluginVersion.parent.id + PluginVersion.version
--- relations
  + parent: belongs to one Plugin FK(pluginId)
--- plugin.version.create
  + id = request.parent.id + "/" + request.plugin.version
  + version = request.plugin.version
  + createdAt = Date.now()
--- plugin.version.clone
  + id = request.parent.id + "/" + request.plugin.version
  + version = request.plugin.version
  + depends = context.plugin.depends
  + createdAt = Date.now()
--- plugin.version.update
  + depends = request.plugin.depends
--- plugin.version.publish
  + publishedAt = Date.now()

[enum] PermissionLevel: String
| "none"
| "view"
| "comment"
| "edit"
| "admin"
| "owner"

[enum] InvolvementStatus: String
| "none"
| "invited"
| "accepted"
| "rejected"

# Project data

## Known primitive (or not so primitive) field types
| "boolean"
| "integer"
| "number"
| "string"
| "enum"
| "timestamp"

## Object types
| "Task"
| "Milestone"
| "TaskSet"
| "TaskTemplate"

## Fundamental task status
| "unknown"
| "todo"
| "working"
| "finished"
| "rejected"

## Custom task status examples
| "todo": "todo"
| "designing": "working"
| "implementing": "working"
| "testing": "working"
| "deploying": "working"
| "done": "finished"

## Assignee selector
| "@<userName>" select person with userName 
| "@#<groupName>" select group

[21] ProjectHistory
+ head: String # head commit id
+ commits: Array
  + [value]: ProjectCommit # all about task objects
+ events: Array
  + [value]: ProjectEvent # all about other stuff, like join/leave project

[22] ProjectCommit
+ id: String # or hash
+ parentId: String
+ authorId: String
+ authorName: String
+ createdAt: Timestamp
+ before: Object # task object tree structure { ... }
+ after: Object # task object tree structure { ... }
  ^ if some key is only in 'after', it's add
  ^ if some key is only in 'before', it's delete
  ^ if some key is in 'before' and 'after', it's update

[23] ProjectEvent
+ id: String
+ type: String
+ description: String
+ createdAt: Timestamp
+ data: Object
  + [key]: String
  + [value]: String

[24] ProjectData
+ title: String
+ description: String
+ createdAt: Timestamp
+ preferences: Object
+ taskStatuses: Object
  + [key]: String # status name
  + [value]: String # fundamental status name
+ taskFields: Object
  + [key]: String # task object type = Task|Milestone|TaskSet
  + [value]: FieldSet
+ taskObjects: Object
  + [key]: String
  + [value]: Task|Milestone|TaskSet|TaskTemplate
+ comments: Object # comments on task objects
  + [key]: String # task key
  + [value]: Object
    + [key]: String
    + [value]: Comment
+ activities: Object
  + [key]: String # person key
  + [value]: Object
    + [key]: String
    + [value]: Activity
+ people: Object
  + [key]: String
  + [value]: User
+ groups: Object
  + [key]: String
  + [value]: Group

[25] FieldSet
+ primary: Object
  + [key]: String
  + [value]: Field
+ secondary: Object
  + [key]: String
  + [value]: Field

[26] Field
+ name: String
+ type: String
+ editable: Boolean
+ min: Number
+ max: Number
+ pattern: String
+ values: String[]
+ default: Boolean|Number|String|Timestamp

[27] TaskObject
+ id: String 
+ type: String
+ ownerId: String
+ groupId: String
+ permissions: ObjectPermissionSet
+ title: String
+ description: String
+ draft: Boolean
+ createdAt: Timestamp

[28] Task extends TaskObject
+ assigned: String[] 
+ status: String
+ taskSetId: String
+ estimateHours: Number
+ estimatePoints: Number
+ ...

[29] Milestone extends TaskObject
+ deadlineAt: Timestamp
+ ...

[30] TaskSet extends TaskObject
+ status: String 
+ get assigned: String[] 
+ ...

[31] TaskTemplate extends TaskObject
+ slots: Object
  + [key]: String
  + [value]: Field
+ output: Array
  + [value]: Object
    + type: ObjectType
    + fields: TaskTemplateFieldSet

[32] TaskTemplateFieldSet
+ [key]: String # field name
+ [value]: Object
  + eval: Boolean # field := expression(slots)
  + const: Boolean # field := value
  + set: Boolean # slot := field
  + get: Boolean # field := slot
  + expression: String # will be evaluated, at your own risk
  + slot: String # slot name
  + value: String # exact value

[33] ObjectPermissionSet
+ [key]: String "group"|"everyone" # no "owner" key because 
                                     owner always has full privileges 
+ [value]: String "view"|"comment"|"edit"

[34] Activity 
+ id: Number
+ taskId: Number
+ personId: Number
+ startedAt: Timestamp
+ finishedAt: Timestamp

[35] Comment
+ id: Number
+ createdAt: Timestamp
+ authorId: Number
+ text: String

[36] User
+ id: String
+ userName: String
+ displayName: String
+ createdAt: Timestamp
+ permission: PermissionLevel 

[37] Group
+ name: String # identifier
+ displayName: String
+ members: Number[] # person ids

[38] PluginVersion
+ id: String
+ pluginId: String
+ version: String

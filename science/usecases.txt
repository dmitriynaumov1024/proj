Use cases

- User account
    - create
    - log in
    - log out
    - view
    - edit (display name, biography)

- Plugin
    - create 
    - edit
    - view
    - find

- Project record
    - create
    - edit (title)
    - delete
    - add plugin
    - remove plugin
    - transfer ownership
    - add collaborator
    - remove collaborator
    - remove self (leave)
    - view list (own, shared)

- Project data
    - edit description
    - manage settings/prefs
    - manage custom task fields
    - manage tasks, milestones, task sets
    - manage, use task templates
    - write comments
    - track activities
    - manage people
    - manage groups
    - view reports
    - view task object history
    - view event log

1. Create user account
client does:
    sends POST ./user/create { user { userName, email, displayName } }
server does:
    if (userName is not valid):
        return { success: false, bad: "userName" }
    else if (email is not valid): 
        return { success: false, bad: "email"}
    else if (userName exists in db):
        return { success: false, exists: "userName" } 
    else:
        add user to db.users
        return { success: true }

2. Log in
client does:
    sends POST ./auth/begin { user { userName } }
server does:
    if (user not exists):
        return { success: false, notFound: true } 
    else if (user has password): 
        create user session
        if (user.preferences.alwaysShortCode):
            async send short code to user's email
            return { 
                success: true, method: ["shortCode", "password"], 
                session: { id }
            }
        else:
            return { 
                success: true, method: ["password"],
                session: { id }
            }
    else:
        create user session
        async send short code to user's email
        return { 
            success: true, method: ["shortCode"],
            session: { id }
        }
client does: 
    go to #4

3. Forgot password
client does:
    sends POST ./auth/forgotpass { user { userName } }
server does:
    if (user not exists):
        return { success: false, notFound: true } 
    else: 
        create user session
        async send short code to user's email
        return { success: true, method: ["shortCode"], session: { id } }
client does:
    sends POST ./auth/resetpass { 
        session { id }, user { shortCode }
    }
server does:
    if (session not exists) or (session expired):
        return { success: false, expired: true }
    else if (shortCode not valid): 
        return { success: false, bad: "shortCode" }
    else: 
        return { success: true, session: { id, token, refreshAt } }
client is now logged in

4. Finish logging in
client does:
    sends POST ./auth/complete { 
        user { password, shortCode }, session { id } 
    }
server does:
    if (session not exists) or (session expired): 
        return { success: false, expired: true }
    else if (password not valid):
        return { success: false, bad: "password" }
    else if (shortCode not valid):
        return { success: false, bad: "shortCode" }
    else: 
        return { success: true, session: { id, token, refreshAt } }
client is now logged in

5. Refresh/Validate session
client does:
    sends POST ./auth/ping {
        session { id, token }
    }
server does:
    if (session not exists) or (session not valid):
        return { success: false }
    else if (session to be refreshed):
        return { success: true, session: { id, token } }
    else:
        return { success: true, session: { id } }

6. Update user
client does:
    sends POST ./user/update {
        session { id, token },
        user { email, displayName, preferences }
    }
server does:
    gets user from session
    if (user not exists):
        return { success: false, notAuthorized: true }
    else:
        update user in database
        return { success: true }

7. Update user password
client does:
    sends POST ./user/updatepass {
        session { id, token },
        user { password, passwordNew }
    }
server does:
    gets user from session
    if (user not exists):
        return { success: false, notAuthorized: true }
    else if (password not match):
        return { success: false, bad: "password" }
    else:
        update user in database
        return { success: true }

8. Get user's own profile
client does:
    sends POST ./user/whoami {
        session { id, token }
    }
server does:
    if (session not valid or not authorized):
        return { success: false, notAuthorized: true }
    else:
        get user id by session
        get user by user id
        return { success: true, user: { ...User } }

9. Get user's profile by id or username
client does:
    sends POST ./user/find {
        session { id, token },
        user { id, userName }
    }
server does:
    let user = null
    if (id provided):
        user = get user by id
    if (user is null): 
        user = get user by userName
    if (user is null):
        return { success: false, notFound: true }
    else:
        return { 
            success: true, 
            user: { id, email, displayName, userName, createdAt } 
        }

10. Create project
assume client logged in
client does:
    sends POST ./project/create {
        session { id, token },
        project { title? }
    }
server does:
    if (session not valid):
        return { success: false, notAuthorized: true }
    else if (user can not create project):
        return { success: false, forbidden: true }
    else:
        return {
            success: true,
            project: { id }
        }

11. Update project
assume client logged in
client does: 
    sends POST ./project/update {
        session { id, token },
        project { id, title, publicRead, publicClone }
    }
server does:
    if (session not valid):
        return { success: false, notAuthorized: true }
    else if (project not found):
        return { success: false, notAuthorized: true }
    else if (user can not update project):
        return { success: false, forbidden: true }
    else:
        return {
            success: true,
            project: { id }
        }

12. Find one project by id
client optionally logged in
client does: 
    sends POST ./project/find {
        session? { id, token },
        project { id }
    }
server does:
    let project = get project by id
    if (project is null):
        return { success: false, notFound: true }
    let allowed = false
    if (project is publicRead): allowed = true
    else:
        let user = get user by session
        if (user is project owner): allowed = true
        else if (exists project involvement where user is receiver) 
        and (permission >= read): allowed = true
    if (allowed): 
        return { success: true, project: project, involvement?: involvement }
    else:
        return { success: false, notAuthorized: true }

13. Clone project by id
assume client is logged in
client does: 
    sends POST ./project/clone {
        session? { id, token },
        project { id }
    }
server does:
    let user = get user by session
    if (user is null):
        return { success: false, notAuthorized: true }
    let project = get project by id
    if (project is null):
        return { success: false, notFound: true }
    let allowed = false
    if (project is publicRead and publicClone): allowed = true
    else:
        if (user is project owner): allowed = true
        else if (exists project involvement where user is receiver) 
        and (permission >= read): allowed = true
    if (allowed): 
        create copy of the project
        return { success: true, project: { id } }
    else:
        return { success: false, notAuthorized: true }

